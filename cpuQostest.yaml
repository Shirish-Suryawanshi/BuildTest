#!/bin/bash

# Path to the CPU Manager state file
CPU_MANAGER_STATE_FILE="/var/lib/kubelet/cpu_manager_state"
echo  # This adds a blank line 


# Function to print isolated CPUs on the host
print_isolated_cpus() {
  echo "Checking isolated CPUs on the system..."
  if [ -f /sys/devices/system/cpu/isolated ]; then
    isolated_cpus=$(cat /sys/devices/system/cpu/isolated)
    if [ -z "$isolated_cpus" ]; then
      echo "No isolated CPUs are configured on this system."
    else
      echo "Isolated CPUs: $isolated_cpus"
    fi
  else
    echo "The file /sys/devices/system/cpu/isolated does not exist. Isolated CPUs are not configured."
  fi
}



# Function to create a pod manifest
create_pod_manifest() {
  local pod_name=$1
  local cpu_request=$2
  local cpu_limit=$3
  local qos_class=$4

  cat <<EOF > ${pod_name}.yaml
apiVersion: v1
kind: Pod
metadata:
  name: ${pod_name}
spec:
  containers:
  - name: ${pod_name}-container
    image: busybox:latest
    imagePullPolicy: IfNotPresent
    command: ["sh", "-c", "while true; do echo \$(date): \$(cat /proc/self/status | grep Cpus_allowed_list); sleep 2; done"]
    resources:
      requests:
        cpu: ${cpu_request}
        memory: 1Gi
      limits:
        cpu: ${cpu_limit}
        memory: 1Gi     
EOF
}

create_pod_manifest_be() {
  local pod_name=$1
  local cpu_request=$2
  local cpu_limit=$3
  local qos_class=$4

  cat <<EOF > ${pod_name}.yaml
apiVersion: v1
kind: Pod
metadata:
  name: ${pod_name}
spec:
  containers:
  - name: ${pod_name}-container
    image: busybox:latest
    imagePullPolicy: IfNotPresent
    command: ["sh", "-c", "while true; do echo \$(date): \$(cat /proc/self/status | grep Cpus_allowed_list); sleep 2; done"]
    #resources:
      #requests:
        #cpu: ${cpu_request}
        #memory: 1Gi
      #limits:
        #cpu: ${cpu_limit}
        #memory: 1Gi
EOF
}


check_cpu_manager_state() {
  echo "Checking CPU Manager state file: $CPU_MANAGER_STATE_FILE"
  if [ -f "$CPU_MANAGER_STATE_FILE" ]; then
    echo "Contents of $CPU_MANAGER_STATE_FILE:"
    cat $CPU_MANAGER_STATE_FILE
  else
    echo "CPU Manager state file not found at $CPU_MANAGER_STATE_FILE. Ensure CPU Manager is enabled with static policy."
    exit 1
  fi
}


# Function to print the CPUs allocated to a pod by inspecting the CPU Manager state file
print_allocated_cpus() {
  local pod_name=$1
  echo "Checking allocated CPUs for pod: ${pod_name}"

  # Extract the container name for the pod
  container_name=$(kubectl get pod ${pod_name} -o jsonpath='{.spec.containers[0].name}')
  if [ -z "$container_name" ]; then
    echo "Pod ${pod_name} is not running or container name not found."
    return
  fi

  # Use jq to extract the allocated CPUs for the container
  allocated_cpus=$(jq -r --arg pod_name "$pod_name" --arg container_name "$container_name" \
    '.entries | to_entries[] | select(.value[$container_name] != null) | .value[$container_name]' $CPU_MANAGER_STATE_FILE)

  if [ -z "$allocated_cpus" ] || [ "$allocated_cpus" == "null" ]; then
    echo "No CPUs explicitly allocated to pod ${pod_name} (likely using default CPU set)."
  else
    echo "Pod ${pod_name} is allocated CPUs: ${allocated_cpus}"
  fi
}

# Function to run a workload inside a pod and check CPU usage

run_workload_and_check_cpu() {
  local pod_name=$1
  echo "Running multiple workloads inside pod: ${pod_name}"

  # Start multiple CPU-intensive processes inside the pod
  kubectl exec ${pod_name} -- sh -c "
    for i in \$(seq 1 10); do
      yes > /dev/null &
    done
  "
  sleep 2  # Give the processes some time to run

  echo "Checking running processes and CPU cores inside pod: ${pod_name}"
  kubectl exec ${pod_name} -- sh -c "
    for pid in \$(ps | grep yes | awk '{print \$1}'); do
      if [ -f /proc/\$pid/stat ]; then
        current_cpu=\$(awk '{print \$39}' /proc/\$pid/stat)
        cpu_affinity=\$(taskset -pc \$pid 2>/dev/null | awk -F': ' '{print \$2}')
        echo \"Process \$pid is running on CPU core: \$current_cpu, allowed CPUs: \$cpu_affinity\";
      else
        echo \"Process \$pid no longer exists.\";
      fi
    done
  "
}

# Function to clean up pods
cleanup_pods() {
  echo "Cleaning up pods..."
  kubectl delete pod best-effort-pod guaranteed-pod milli-guaranteed-pod burstable-pod
  rm -f best-effort-pod.yaml guaranteed-pod.yaml milli-guaranteed-pod.yaml burstable-pod.yaml
}

# Main script starts here
print_isolated_cpus
echo  # Add a blank line
echo "********************************************"
echo "Checking CPU Manager state file before deploying pods..."
check_cpu_manager_state
echo  # Add a blank line
echo "********************************************"
echo  # This adds a blank line 

echo "Creating and deploying pods..."
# Best-Effort Pod (no requests or limits)
create_pod_manifest_be "best-effort-pod" "" "" "BestEffort"
kubectl apply -f best-effort-pod.yaml

# Guaranteed Pod (whole CPU)
create_pod_manifest "guaranteed-pod" "31" "31" "Guaranteed"
kubectl apply -f guaranteed-pod.yaml

# Milli-Guaranteed Pod (fractional CPU)
create_pod_manifest "milli-guaranteed-pod" "500m" "500m" "milli-Guaranteed"
kubectl apply -f milli-guaranteed-pod.yaml

# Burstable Pod (request < limit)
create_pod_manifest "burstable-pod" "250m" "1" "Burstable"
kubectl apply -f burstable-pod.yaml

echo  # This adds a blank line 

echo "Waiting for pods to be in Running state..."
kubectl wait --for=condition=Ready pod/best-effort-pod --timeout=60s
kubectl wait --for=condition=Ready pod/guaranteed-pod --timeout=60s
kubectl wait --for=condition=Ready pod/milli-guaranteed-pod --timeout=60s
kubectl wait --for=condition=Ready pod/burstable-pod --timeout=60s

echo "********************************************"
echo  # This adds a blank line 
echo "Checking CPU Manager state file after deploying pods..."
echo  # This adds a blank line 
check_cpu_manager_state
echo  # Add a blank line
echo "********************************************"
echo  # This adds a blank line 
echo "Printing allocated CPUs for each pod..."
print_allocated_cpus "best-effort-pod"
echo  # This adds a blank line 
print_allocated_cpus "guaranteed-pod"
echo  # This adds a blank line 
print_allocated_cpus "milli-guaranteed-pod"
echo  # This adds a blank line 
print_allocated_cpus "burstable-pod"

echo "********************************************"
echo  # Add a blank line
echo "Running workloads inside pods and checking CPU usage..."
run_workload_and_check_cpu "best-effort-pod"
echo  # This adds a blank line 
run_workload_and_check_cpu "guaranteed-pod"
echo  # This adds a blank line 
run_workload_and_check_cpu "milli-guaranteed-pod"
echo  # This adds a blank line 
run_workload_and_check_cpu "burstable-pod"

echo "********************************************"
echo  # Add a blank line
echo  # This adds a blank line 
echo "Cleaning up..."
echo  # This adds a blank line 
cleanup_pods

echo "Test completed."
